/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class App {
    public String getGreeting() {
            return "Hello World!";
            }
    public static void readXMLFile(File file, boolean[] selectedFields) {
        try {
            if (!file.exists()) {
                System.err.println("Error: The specified file does not exist.");
                return;
            }

            // Create SAXParser instance
            SAXParserFactory factory = SAXParserFactory.newInstance();
            SAXParser saxParser = factory.newSAXParser();

            // Create and configure handler
            SAXHandler handler = new SAXHandler(selectedFields);

            // Parse XML file
            saxParser.parse(file, handler);

            // Print JSON output
            System.out.println(handler.getJSONOutput());

        } catch (ParserConfigurationException | SAXException | IOException e) {
            e.printStackTrace();
        }
    }

    // Main method for testing
    public static void main(String[] args) {
        File file = new File("data.xml");
        boolean[] selectedFields = {true, true, true, true, true}; // Select all fields to display
        readXMLFile(file, selectedFields);
    }

    // SAX Handler class to handle XML parsing events
    private static class SAXHandler extends DefaultHandler {
        private StringBuilder data;
        private boolean[] selectedFields;
        private Map<String, String> record;
        private StringBuilder jsonOutput;

        public SAXHandler(boolean[] selectedFields) {
            this.selectedFields = selectedFields;
            this.jsonOutput = new StringBuilder();
            this.record = new HashMap<>();
            this.data = new StringBuilder();
        }

        @Override
        public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
            data.setLength(0);
        }

        @Override
        public void endElement(String uri, String localName, String qName) throws SAXException {
            if (qName.equalsIgnoreCase("record")) {
                if (!record.isEmpty()) {
                    appendRecordToJSON();
                    record.clear();
                }
            } else {
                if (isSelectedField(qName)) {
                    record.put(qName, data.toString());
                }
            }
        }

        @Override
        public void characters(char[] ch, int start, int length) throws SAXException {
            data.append(new String(ch, start, length));
        }

        public String getJSONOutput() {
            return jsonOutput.toString();
        }

        private boolean isSelectedField(String fieldName) {
            switch (fieldName) {
                case "name":
                case "postalZip":
                case "region":
                case "country":
                case "address":
                    return true;
                default:
                    return false;
            }
        }

        private void appendRecordToJSON() {
            jsonOutput.append("{");
            boolean first = true;
            for (Map.Entry<String, String> entry : record.entrySet()) {
                if (!first) {
                    jsonOutput.append(", ");
                }
                jsonOutput.append("\"").append(entry.getKey()).append("\": \"").append(entry.getValue()).append("\"");
                first = false;
            }
            jsonOutput.append("}\n");
        }
    }
}